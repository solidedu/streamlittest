AWSTemplateFormatVersion: '2010-09-09'
Description: 'End-to-end CloudFormation template for Bedrock Knowledge Base, Lambda, and Frontend'

Parameters:
  KnowledgeBaseS3Bucket:
    Type: String
    Description: The S3 bucket containing the knowledge base articles

  KnowledgeBaseS3Prefix:
    Type: String
    Description: The S3 prefix (folder) containing the knowledge base articles
    Default: ''

Resources:
  BedrockKnowledgeBase:
    Type: AWS::Bedrock::KnowledgeBase
    Properties:
      Name: MyBedrockKnowledgeBase
      Description: Knowledge base for contextual chatbot
      KnowledgeBaseConfiguration:
        Type: VECTOR
        VectorKnowledgeBaseConfiguration:
          EmbeddingModel:
            ModelId: amazon.titan-embed-text-v1
      StorageConfiguration:
        Type: AWS_S3
        S3Configuration:
          BucketName: !Ref KnowledgeBaseS3Bucket
          Prefix: !Ref KnowledgeBaseS3Prefix

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:ListKnowledgeBases
                  - bedrock:QueryKnowledgeBase
                Resource: '*'

  BedrockLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: BedrockChatbotFunction
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import os

          bedrock_runtime = boto3.client('bedrock-runtime')
          bedrock = boto3.client('bedrock')

          KNOWLEDGE_BASE_ID = os.environ['KNOWLEDGE_BASE_ID']
          MODEL_ID = 'anthropic.claude-v2'

          def query_knowledge_base(query):
              response = bedrock.query_knowledge_base(
                  knowledgeBaseId=KNOWLEDGE_BASE_ID,
                  query=query,
                  retrievalConfiguration={
                      'vectorSearchConfiguration': {
                          'numberOfResults': 3
                      }
                  }
              )
              return response['retrievalResults']

          def invoke_model(prompt):
              body = json.dumps({
                  "prompt": prompt,
                  "max_tokens_to_sample": 300,
                  "temperature": 0.7,
                  "top_p": 1,
                  "stop_sequences": ["\n\nHuman:"]
              })
              
              response = bedrock_runtime.invoke_model(
                  modelId=MODEL_ID,
                  contentType='application/json',
                  accept='application/json',
                  body=body
              )
              
              response_body = json.loads(response['body'].read())
              return response_body['completion']

          def handler(event, context):
              body = json.loads(event['body'])
              query = body['query']
              
              # Query the knowledge base
              retrieval_results = query_knowledge_base(query)
              
              # Prepare context from retrieval results
              context = "\n".join([result['content'] for result in retrieval_results])
              
              # Prepare prompt for the model
              prompt = f"""Human: Use the following information to answer the question. If the information doesn't contain the answer, say you don't know.

              Information:
              {context}

              Question: {query}

              Assistant: Based on the information provided, I'll do my best to answer your question.

              """
              
              # Invoke the model
              response = invoke_model(prompt)
              
              return {
                  'statusCode': 200,
                  'body': json.dumps({
                      'answer': response,
                      'sources': [result['location']['s3Location']['uri'] for result in retrieval_results]
                  }),
                  'headers': {
                      'Content-Type': 'application/json',
                      'Access-Control-Allow-Origin': '*'
                  }
              }
      Runtime: python3.8
      Timeout: 30
      Environment:
        Variables:
          KNOWLEDGE_BASE_ID: !Ref BedrockKnowledgeBase

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: BedrockChatbotAPI

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: 'chat'
      RestApiId: !Ref ApiGateway

  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - LambdaArn: !GetAtt BedrockLambdaFunction.Arn

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGatewayMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: prod

  LambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt BedrockLambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/chat

  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-frontend-${AWS::AccountId}
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html

  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub ${FrontendBucket.Arn}/*

Outputs:
  ApiGatewayUrl:
    Description: URL of the API Gateway endpoint
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/chat
  FrontendUrl:
    Description: URL of the S3 hosted frontend
    Value: !GetAtt FrontendBucket.WebsiteURL
  KnowledgeBaseId:
    Description: ID of the created Bedrock Knowledge Base
    Value: !Ref BedrockKnowledgeBase
