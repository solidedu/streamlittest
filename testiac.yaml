AWSTemplateFormatVersion: '2010-09-09'
Description: Template to deploy AWS Bedrock knowledge base and Lambda functions for API operations

Parameters:
  DocumentS3Key:
    Type: String
    Description: S3 key for the documents to ingest
  KnowledgeBaseID:
    Type: String
    Description: The Bedrock Knowledge base ID
    Default: ''
  LambdaLayerS3BucketName:
    Type: String
    Description: The S3 bucket storing the Lambda layer code
    Default: ''
  KnowledgeBaseBucketName:
    Type: String
    Description: The name of the existing S3 bucket for the Knowledge Base

Resources:
  # IAM Role for Bedrock Execution
  BedrockExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AmazonBedrockFoundationModelPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource: !Sub 'arn:aws:bedrock:${AWS::Region}::foundation-model/amazon.titan-embed-text-v1'
        - PolicyName: AmazonBedrockS3Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub 'arn:aws:s3:::${KnowledgeBaseBucketName}'
                  - !Sub 'arn:aws:s3:::${KnowledgeBaseBucketName}/*'
                Condition:
                  StringEquals:
                    aws:ResourceAccount: !Sub '${AWS::AccountId}'

  # IAM Role for Lambda Functions
  LambdaExecutionRoleForKnowledgeBase:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: KnowledgeBaseExecutionPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:Retrieve
                  - bedrock:RetrieveAndGenerate
                  - s3:GetObject
                  - s3:ListBucket
                Resource: '*'

  # Lambda Layer for Knowledge Base
  DeployKnowledgeBaseLambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: KnowledgeBaseLambdaLayer
      Description: Knowledge Base Lambda Layer
      Content:
        S3Bucket: !Ref LambdaLayerS3BucketName
        S3Key: lambdalayer/knowledgebase_lambdalayer.zip
      CompatibleRuntimes:
        - python3.12
        - python3.11
        - python3.10

  # Lambda Function to Create Knowledge Base
  CreateKnowledgeBaseLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CreateKnowledgeBase
      Code:
        ZipFile: |
          import json
          import boto3

          def lambda_handler(event, context):
              client = boto3.client('bedrock')
              response = client.create_knowledge_base(
                  Name='MyKnowledgeBase'
              )
              knowledge_base_id = response['KnowledgeBaseId']
              return {
                  'PhysicalResourceId': knowledge_base_id,
                  'Data': {
                      'KnowledgeBaseID': knowledge_base_id
                  }
              }
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRoleForKnowledgeBase.Arn
      Runtime: python3.12
      Timeout: 300

  # Custom Resource to Create Knowledge Base
  KnowledgeBase:
    Type: Custom::KnowledgeBase
    Properties:
      ServiceToken: !GetAtt CreateKnowledgeBaseLambda.Arn

  # Lambda Function for Knowledge Base Operations
  DeployKnowledgeBaseLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: InvokeKnowledgeBase
      Code:
        ZipFile: |
          import os
          import boto3
          import random
          import string

          boto3_session = boto3.session.Session()
          region = boto3_session.region_name

          # create a boto3 bedrock client
          bedrock_agent_runtime_client = boto3.client('bedrock-agent-runtime')

          # get knowledge base id from environment variable
          kb_id = os.environ.get("KNOWLEDGE_BASE_ID")
          #print (kb_id)

          # declare model id for calling RetrieveAndGenerate API
          model_id = "anthropic.claude-3-sonnet-20240229-v1:0"
          model_arn = f'arn:aws:bedrock:{region}::foundation-model/{model_id}'

          def retrieveAndGenerate(input, kbId, model_arn, sessionId):
              #print(input, kbId, model_arn, sessionId)
              if sessionId != "":
                  return bedrock_agent_runtime_client.retrieve_and_generate(
                      input={
                          'text': input
                      },
                      retrieveAndGenerateConfiguration={
                          'type': 'KNOWLEDGE_BASE',
                          'knowledgeBaseConfiguration': {
                              'knowledgeBaseId': kbId,
                              'modelArn': model_arn
                          }
                      },
                      sessionId=sessionId
                  )
              else:
                  return bedrock_agent_runtime_client.retrieve_and_generate(
                      input={
                          'text': input
                      },
                      retrieveAndGenerateConfiguration={
                          'type': 'KNOWLEDGE_BASE',
                          'knowledgeBaseConfiguration': {
                              'knowledgeBaseId': kbId,
                              'modelArn': model_arn
                          }
                      }
                  )

          def lambda_handler(event, context):
              query = event["question"]
              sessionId = event["sessionId"]
              response = retrieveAndGenerate(query, kb_id, model_arn, sessionId)
              generated_text = response['output']['text']
              sessionId = response['sessionId']
              citations = response['citations']
              print (generated_text)
              print (sessionId)
              return {
                  'statusCode': 200,
                  'body': json.dumps({"question": query.strip(), "answer": generated_text.strip(), "sessionId":sessionId, "citations":citations})
              }
      Description: Create KnowledgeBase Lambda
      Handler: index.lambda_handler
      MemorySize: 256
      Role: !GetAtt LambdaExecutionRoleForKnowledgeBase.Arn
      Runtime: python3.12
      Timeout: 60
      Layers: 
        - !Ref DeployKnowledgeBaseLambdaLayer
      Environment:
        Variables:
          KNOWLEDGE_BASE_ID: !Ref KnowledgeBaseID

Outputs:
  BedrockExecutionRoleArn:
    Description: ARN of the Bedrock Execution Role
    Value: !GetAtt BedrockExecutionRole.Arn
  InvokeKnowledgeBaseLambdaArn:
    Description: ARN of the InvokeKnowledgeBase Lambda Function
    Value: !GetAtt DeployKnowledgeBaseLambda.Arn
  CreateKnowledgeBaseLambdaArn:
    Description: ARN of the CreateKnowledgeBase Lambda Function
    Value: !GetAtt CreateKnowledgeBaseLambda.Arn
  KnowledgeBaseID:
    Description: ID of the created Knowledge Base
    Value: !GetAtt KnowledgeBase.KnowledgeBaseID
